// <auto-generated />
using System;
using App.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Repositories.Migrations
{
    [DbContext(typeof(EFAppDbContext))]
    [Migration("20250903065216_uc")]
    partial class uc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Core.Entities.GeometryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Geometry>("Geoloc")
                        .HasColumnType("geometry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Wkt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Geometries", (string)null);
                });

            modelBuilder.Entity("App.Core.Entities.GeometryInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("GeometryId")
                        .HasColumnType("integer");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhotoBase64")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.HasKey("Id");

                    b.HasIndex("GeometryId")
                        .IsUnique();

                    b.ToTable("GeometryInfos", (string)null);
                });

            modelBuilder.Entity("App.Core.Entities.GeometryMetricsEntity", b =>
                {
                    b.Property<int>("GeometryId")
                        .HasColumnType("integer");

                    b.Property<double?>("Area")
                        .HasColumnType("double precision");

                    b.Property<Polygon>("BoundingBox")
                        .HasColumnType("geometry(Polygon,4326)");

                    b.Property<Point>("Centroid")
                        .HasColumnType("geometry(Point,4326)");

                    b.Property<Point>("EndPoint")
                        .HasColumnType("geometry(Point,4326)");

                    b.Property<double?>("Length")
                        .HasColumnType("double precision");

                    b.Property<Point>("StartPoint")
                        .HasColumnType("geometry(Point,4326)");

                    b.HasKey("GeometryId");

                    b.ToTable("GeometryMetrics", (string)null);
                });

            modelBuilder.Entity("App.Core.Entities.GeometryInfoEntity", b =>
                {
                    b.HasOne("App.Core.Entities.GeometryEntity", "GeometryEntity")
                        .WithOne("GeometryInfo")
                        .HasForeignKey("App.Core.Entities.GeometryInfoEntity", "GeometryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeometryEntity");
                });

            modelBuilder.Entity("App.Core.Entities.GeometryMetricsEntity", b =>
                {
                    b.HasOne("App.Core.Entities.GeometryEntity", "GeometryEntity")
                        .WithOne("GeometryMetrics")
                        .HasForeignKey("App.Core.Entities.GeometryMetricsEntity", "GeometryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeometryEntity");
                });

            modelBuilder.Entity("App.Core.Entities.GeometryEntity", b =>
                {
                    b.Navigation("GeometryInfo")
                        .IsRequired();

                    b.Navigation("GeometryMetrics")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
